---
title: "Homework 5"
format: html
editor: visual
jupyter: python3
---

```{yaml}
embed-resources: true
```

## Long vs Wide Exercise

```{python}
import pandas as pd
import altair as alt

alt.data_transformers.disable_max_rows()

# Load the data and pivot it to wide format
jobs_url = "https://cdn.jsdelivr.net/npm/vega-datasets@2.8.0/data/jobs.json"
jobs = pd.read_json(jobs_url)
```

```{python}

# Create the chart
chart = (
    alt.Chart(jobs)
    .mark_circle()
    .encode(
        x=alt.X('job:N', title=None),
        y=alt.Y('perc:Q', scale=alt.Scale(domain=[0, 0.1])),
        color=alt.Color('sex:N', title=None),
        tooltip=['job:N','perc:Q','sex:N']
    )
    .properties(
        height=200,
        width=2000,
        title='Percent of Men and Women in Various Occupations (1950 and 2000)'
    ).facet(
  row = "year"
  ).transform_filter(
    (alt.datum.year == 1950) | (alt.datum.year == 2000)
    )
)

chart
```

```{python}
chart = (
    alt.Chart(jobs)
    .mark_line()
    .encode(
        x=alt.X('year:N', title=None),
        y=alt.Y('perc:Q', scale=alt.Scale(domain=[0, 0.002])),
        color=alt.Color('sex:N', title=None)
    )
    .properties(
        height=200,
        width=2000,
        title='Percent of Men and Women in the Actor Occupation Over the Years'
    ).transform_filter(
    (alt.datum.job == 'Actor')
    )
)

chart
```

```{python}
chart3 = (
    alt.Chart(jobs)
    .mark_bar()
    .encode(
        x=alt.X('sex:N', title=None),
        y=alt.Y('perc:Q'),
        color=alt.Color('sex:N', title=None)
    )
    .properties(
        height=200,
        width=600,
        title='Percent of Men and Women in the Actor Occupation Over the Years'
    ).transform_filter(
      (alt.datum.job == 'Advertising Agent')
    )
)

chart3
```

## Maps World

```{python}
import json 
from urllib.request import urlopen
import pandas as pd
from vega_datasets import data

world2_url = 'https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json'

world2 = json.load(urlopen(world2_url))
gapminder = data.gapminder()

```

```{python}
# Choropleth map
world_choropleth = alt.Chart(alt.topo_feature(world2_url, feature = 'countries')).mark_geoshape(
    fill='lightgray',
    stroke='white'
).properties(
    width=800,
    height=500
).project('equalEarth')


```

```{python}

world_map_with_data = world_choropleth.transform_lookup(
    lookup="properties.name",
    from_=alt.LookupData(gapminder, 'country', ['fertility', 'life_expect'])
).encode(
  fill = "fertility:Q",
    stroke = "fertility:Q"
)

world_map_with_data
```

## US MAPS

```{python}

state_url = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json'

state = json.load(urlopen(state_url))
airports = data.airports()
states_ab = pd.read_csv('https://raw.githubusercontent.com/jasonong/List-of-US-States/master/states.csv')

airports.rename(columns={'state': 'Abbreviation'}, inplace=True)

```

```{python}

airport_left = pd.merge(states_ab, airports, on='Abbreviation', how='left')
```

```{python}

airports_by_state = airport_left.groupby('State').size().reset_index(name='count')
```

```{python}
state_choropleth = alt.Chart(alt.topo_feature(state_url, feature = 'states')).mark_geoshape(
    fill='lightgray',
    stroke='white'
).properties(
    width=800,
    height=500
).project('albersUsa')

```

```{python}
state_map = state_choropleth.transform_lookup(
    lookup="properties.name",
    from_=alt.LookupData(airports_by_state, 'State', ['count'])
).encode(
  fill = "count:Q",
    stroke = "count:Q"
)

state_map
```

## No.3

One graphic that I particulary interested in learning more and like is the circular bar chart. https://r-graph-gallery.com/web-circular-barplot-with-R-and-ggplot2.html

### What is the main story of this graphic?

The main story of this graphic is to provide information on various hiking locations in Washington.The graph shows the total length of hiking tracks available in different regions. It also indicates the mean gain in elevation per location.For experienced hikers, the North Cascades region is recommended due to its numerous tracks and higher elevations.

This visualization aims to guide hikers in choosing suitable destinations based on track variety and challenge.

### What makes it a good graphic?

I think what makes this a good graphic is the the clarity of the graph that makes it easy to understand. The text above the graph provides context and guides the viewer's attention. The bar was also sorted which makes it easier to see that the North Cascades is the most suitable destination for experienced hikers.

### What features do you think you would know how to implement in Vega-lite?

I think I would know how to do a bar chart and assign the x, y, and color. I would also know how to aggregate and calculate it to mean based on the data.

### Are there any features of the graphic that you would not know how to do in Vega-lite? If so, list them.

The feature that I think I would have trouble doing it is probably how to make the bar chart, scale or grid, and labels circular .
